/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  inputType,
} from './components/stk-components/data-entry/input/stk-input';
import {
  Validator,
  ValidatorEntry,
} from './validators/validator';

export namespace Components {
  interface MyComponent {
    /**
    * The first name
    */
    'first': string;
    /**
    * The last name
    */
    'last': string;
    /**
    * The middle name
    */
    'middle': string;
  }
  interface StkInput {
    'allowClear': boolean;
    'defaultValue': string;
    'disabled': boolean;
    'label': string;
    'max': number;
    'maxLength': number;
    'min': number;
    'orientation': string;
    'placeholder': string;
    'required': boolean;
    'rows': number;
    'step': number;
    'type': inputType;
    'validator': Array<string | ValidatorEntry | Validator<string>>;
    'value': string;
  }
  interface StkInputCurrency {
    'allowClear': boolean;
    'defaultValue': string;
    'disabled': boolean;
    'maxLength': number;
    'placeholder': string;
    'validator': Array<string | ValidatorEntry | Validator<string>>;
    'value': string;
  }
  interface StkInputEmail {
    'allowClear': boolean;
    'defaultValue': string;
    'disabled': boolean;
    'maxLength': number;
    'placeholder': string;
    'required': boolean;
    'validator': Array<string | ValidatorEntry | Validator<string>>;
    'value': string;
  }
  interface StkInputPassword {
    'allowClear': boolean;
    'defaultValue': string;
    'disabled': boolean;
    'maxLength': number;
    'placeholder': string;
    'validator': Array<string | ValidatorEntry | Validator<string>>;
    'value': string;
  }
  interface StkInputPhone {
    'allowClear': boolean;
    'defaultValue': string;
    'disabled': boolean;
    'maxLength': number;
    'placeholder': string;
    'validator': Array<string | ValidatorEntry | Validator<string>>;
    'value': string;
  }
  interface StkInputText {
    'allowClear': boolean;
    'defaultValue': string;
    'disabled': boolean;
    'maxLength': number;
    'placeholder': string;
    'validator': Array<string | ValidatorEntry | Validator<string>>;
    'value': string;
  }
}

declare global {


  interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {}
  var HTMLMyComponentElement: {
    prototype: HTMLMyComponentElement;
    new (): HTMLMyComponentElement;
  };

  interface HTMLStkInputElement extends Components.StkInput, HTMLStencilElement {}
  var HTMLStkInputElement: {
    prototype: HTMLStkInputElement;
    new (): HTMLStkInputElement;
  };

  interface HTMLStkInputCurrencyElement extends Components.StkInputCurrency, HTMLStencilElement {}
  var HTMLStkInputCurrencyElement: {
    prototype: HTMLStkInputCurrencyElement;
    new (): HTMLStkInputCurrencyElement;
  };

  interface HTMLStkInputEmailElement extends Components.StkInputEmail, HTMLStencilElement {}
  var HTMLStkInputEmailElement: {
    prototype: HTMLStkInputEmailElement;
    new (): HTMLStkInputEmailElement;
  };

  interface HTMLStkInputPasswordElement extends Components.StkInputPassword, HTMLStencilElement {}
  var HTMLStkInputPasswordElement: {
    prototype: HTMLStkInputPasswordElement;
    new (): HTMLStkInputPasswordElement;
  };

  interface HTMLStkInputPhoneElement extends Components.StkInputPhone, HTMLStencilElement {}
  var HTMLStkInputPhoneElement: {
    prototype: HTMLStkInputPhoneElement;
    new (): HTMLStkInputPhoneElement;
  };

  interface HTMLStkInputTextElement extends Components.StkInputText, HTMLStencilElement {}
  var HTMLStkInputTextElement: {
    prototype: HTMLStkInputTextElement;
    new (): HTMLStkInputTextElement;
  };
  interface HTMLElementTagNameMap {
    'my-component': HTMLMyComponentElement;
    'stk-input': HTMLStkInputElement;
    'stk-input-currency': HTMLStkInputCurrencyElement;
    'stk-input-email': HTMLStkInputEmailElement;
    'stk-input-password': HTMLStkInputPasswordElement;
    'stk-input-phone': HTMLStkInputPhoneElement;
    'stk-input-text': HTMLStkInputTextElement;
  }
}

declare namespace LocalJSX {
  interface MyComponent extends JSXBase.HTMLAttributes<HTMLMyComponentElement> {
    /**
    * The first name
    */
    'first'?: string;
    /**
    * The last name
    */
    'last'?: string;
    /**
    * The middle name
    */
    'middle'?: string;
  }
  interface StkInput extends JSXBase.HTMLAttributes<HTMLStkInputElement> {
    'allowClear'?: boolean;
    'defaultValue'?: string;
    'disabled'?: boolean;
    'label'?: string;
    'max'?: number;
    'maxLength'?: number;
    'min'?: number;
    'onChanged'?: (event: CustomEvent<string>) => void;
    'orientation'?: string;
    'placeholder'?: string;
    'required'?: boolean;
    'rows'?: number;
    'step'?: number;
    'type'?: inputType;
    'validator'?: Array<string | ValidatorEntry | Validator<string>>;
    'value'?: string;
  }
  interface StkInputCurrency extends JSXBase.HTMLAttributes<HTMLStkInputCurrencyElement> {
    'allowClear'?: boolean;
    'defaultValue'?: string;
    'disabled'?: boolean;
    'maxLength'?: number;
    'onChanged'?: (event: CustomEvent<string>) => void;
    'placeholder'?: string;
    'validator'?: Array<string | ValidatorEntry | Validator<string>>;
    'value'?: string;
  }
  interface StkInputEmail extends JSXBase.HTMLAttributes<HTMLStkInputEmailElement> {
    'allowClear'?: boolean;
    'defaultValue'?: string;
    'disabled'?: boolean;
    'maxLength'?: number;
    'onChanged'?: (event: CustomEvent<string>) => void;
    'placeholder'?: string;
    'required'?: boolean;
    'validator'?: Array<string | ValidatorEntry | Validator<string>>;
    'value'?: string;
  }
  interface StkInputPassword extends JSXBase.HTMLAttributes<HTMLStkInputPasswordElement> {
    'allowClear'?: boolean;
    'defaultValue'?: string;
    'disabled'?: boolean;
    'maxLength'?: number;
    'onChanged'?: (event: CustomEvent<string>) => void;
    'placeholder'?: string;
    'validator'?: Array<string | ValidatorEntry | Validator<string>>;
    'value'?: string;
  }
  interface StkInputPhone extends JSXBase.HTMLAttributes<HTMLStkInputPhoneElement> {
    'allowClear'?: boolean;
    'defaultValue'?: string;
    'disabled'?: boolean;
    'maxLength'?: number;
    'onChanged'?: (event: CustomEvent<string>) => void;
    'placeholder'?: string;
    'validator'?: Array<string | ValidatorEntry | Validator<string>>;
    'value'?: string;
  }
  interface StkInputText extends JSXBase.HTMLAttributes<HTMLStkInputTextElement> {
    'allowClear'?: boolean;
    'defaultValue'?: string;
    'disabled'?: boolean;
    'maxLength'?: number;
    'onChanged'?: (event: CustomEvent<string>) => void;
    'placeholder'?: string;
    'validator'?: Array<string | ValidatorEntry | Validator<string>>;
    'value'?: string;
  }

  interface IntrinsicElements {
    'my-component': MyComponent;
    'stk-input': StkInput;
    'stk-input-currency': StkInputCurrency;
    'stk-input-email': StkInputEmail;
    'stk-input-password': StkInputPassword;
    'stk-input-phone': StkInputPhone;
    'stk-input-text': StkInputText;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements extends LocalJSX.IntrinsicElements {}
  }
}


